--- src/TerrariaNetCore/Terraria/GameContent/ItemDropRules/CommonCode.cs
+++ src/tModLoader/Terraria/GameContent/ItemDropRules/CommonCode.cs
@@ -1,26 +_,64 @@
 using Microsoft.Xna.Framework;
 using Terraria.Utilities;
+using Terraria.ModLoader;
 
 namespace Terraria.GameContent.ItemDropRules
 {
 	public static class CommonCode
 	{
-		public static void DropItemFromNPC(NPC npc, int itemId, int stack, bool scattered = false) {
-			if (itemId > 0 && itemId < 5125) {
-				int x = (int)npc.position.X + npc.width / 2;
-				int y = (int)npc.position.Y + npc.height / 2;
+		public static void DropItem(DropAttemptInfo info, int item, int stack, bool scattered = false) {
+			if (info.npc == null) {
+				int x = (int)info.player.position.X + info.player.width / 2;
+				int y = (int)info.player.position.Y + info.player.height / 2;
 				if (scattered) {
-					x = (int)npc.position.X + Main.rand.Next(npc.width + 1);
+					x = (int)info.player.position.X + Main.rand.Next(info.player.width + 1);
-					y = (int)npc.position.Y + Main.rand.Next(npc.height + 1);
+					y = (int)info.player.position.Y + Main.rand.Next(info.player.height + 1);
 				}
 
-				int itemIndex = Item.NewItem(npc.GetItemSource_Loot(), x, y, 0, 0, itemId, stack, noBroadcast: false, -1);
+				Item.NewItem(info.player.GetItemSource_OpenItem(info.item), x, y, 0, 0, item, stack, noBroadcast: false, -1);
-				ModifyItemDropFromNPC(npc, itemIndex);
 			}
+			else {
+				if (item > 0 && item < ItemLoader.ItemCount) {
+					int x = (int)info.npc.position.X + info.npc.width / 2;
+					int y = (int)info.npc.position.Y + info.npc.height / 2;
+					if (scattered) {
+						x = (int)info.npc.position.X + Main.rand.Next(info.npc.width + 1);
+						y = (int)info.npc.position.Y + Main.rand.Next(info.npc.height + 1);
+					}
+
+					int itemIndex = Item.NewItem(info.npc.GetItemSource_Loot(), x, y, 0, 0, item, stack, noBroadcast: false, -1);
+					ModifyItemDropFromNPC(info.npc, itemIndex);
+				}
+			}
+		}
+
+		// last param ('player') added by TML
+		internal static void DropItemFromNPC(NPC npc, int itemId, int stack, bool scattered = false, Player player = null) {
+			DropAttemptInfo info = new() {
+				IsExpertMode = Main.expertMode,
+				IsMasterMode = Main.masterMode,
+				IsInSimulation = false,
+				item = itemId,
+				npc = npc,
+				player = player,
+			};
+			DropItem(info, itemId, stack, scattered);
+
+			/*
+			int x = (int)npc.position.X + npc.width / 2;
+			int y = (int)npc.position.Y + npc.height / 2;
+			if (scattered) {
+				x = (int)npc.position.X + Main.rand.Next(npc.width + 1);
+				y = (int)npc.position.Y + Main.rand.Next(npc.height + 1);
+			}
+
+			int itemIndex = Item.NewItem(npc.GetItemSource_Loot(), x, y, 0, 0, item, stack, noBroadcast: false, -1);
+			ModifyItemDropFromNPC(npc, itemIndex);
+			 */
 		}
 
 		public static void DropItemLocalPerClientAndSetNPCMoneyTo0(NPC npc, int itemId, int stack, bool interactionRequired = true) {
-			if (itemId <= 0 || itemId >= 5125)
+			if (itemId <= 0 || itemId >= ItemLoader.ItemCount)
 				return;
 
 			if (Main.netMode == 2) {
@@ -41,7 +_,7 @@
 		}
 
 		public static void DropItemForEachInteractingPlayerOnThePlayer(NPC npc, int itemId, UnifiedRandom rng, int chanceNumerator, int chanceDenominator, int stack = 1, bool interactionRequired = true) {
-			if (itemId <= 0 || itemId >= 5125)
+			if (itemId <= 0 || itemId >= ItemLoader.ItemCount)
 				return;
 
 			if (Main.netMode == 2) {
